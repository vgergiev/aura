<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component
    isTemplate="true"
    extensible="true"
    support="GA"
    access="GLOBAL"
    description="Default template used to bootstrap Aura framework. To use another template, extend aura:template and set attributes using aura:set.">

    <aura:attribute name="title"                    type="String" access="GLOBAL" default="Aura" description="The title of the template."/>

    <aura:attribute name="auraStyleTags"            type="String" description="Loads Aura CSS files."/>
    <aura:attribute name="auraScriptTags"           type="String" description="Loads the js framework, preloads the definitions of all preload namespaces, and any other framework script"/>
    <aura:attribute name="auraBaseScriptTags"       type="String" />
    <aura:attribute name="auraNamespacesScriptTags" type="String" />
    <aura:attribute name="auraResetStyle"           type="String" default="reset" description="Which style of css reset file to use to smooth out default browser chrome inconsistencies. Possible values are 'normalize', 'reset', or '' (none). Default is 'reset'."/>
    <aura:attribute name="auraResetTags"            type="String" access="PRIVATE" description="Will contain the style import tag for the type of reset style chosen, or nothing."/>
    <aura:attribute name="auraInlineStyle"          type="String"           description="Loads Aura inline style from template.css."/>
    <aura:attribute name="auraInit"                 type="String"           description="Initializes Aura ayncronously."/>
    <aura:attribute name="auraInitSync"             type="String"           description="Denotes synchronous initialization of Aura. Returns the same value as auraInit."/>
    <aura:attribute name="auraPreInitBlock"         type="Aura.Component[]" access="GLOBAL" description="The block of content that is rendered before Aura initialization."/>
    <aura:attribute name="auraInitBlock"            type="Aura.Component[]" description="The block of content that is rendered when initialization is complete."/>

    <aura:attribute name="autoInitialize"           type="String" default="true" description="Denotes whether Aura should auto-initialize (true) or not (false)."/>
    <aura:attribute name="autoInitializeSync"       type="String" default="false" />

    <aura:attribute name="doctype"                  type="String" access="GLOBAL" default="&lt;!DOCTYPE html&gt;"         description="The DOCTYPE declaration for the template."/>
    <aura:attribute name="loadingText"              type="String" access="GLOBAL" default="Loading"                       description="Loading text"/>
    <aura:attribute name="errorTitle"               type="String" access="GLOBAL" default="Looks like there's a problem:" description="Error title when an error has occured."/>
    <aura:attribute name="errorMessage"             type="String" access="GLOBAL" default="CSS Error"                     description="Error loading text"/>
    <aura:attribute name="defaultBodyClass"         type="String" access="GLOBAL" default="loading"                       description="Default body CSS styles."/>
    <aura:attribute name="bodyClass"                type="String" access="GLOBAL"                                         description="Extra body CSS styles"/>
    <aura:attribute name="extraStyleTags"           type="Aura.Component[]"                                               description="Additional &lt;link&gt; elements for external CSS."/>
    <aura:attribute name="extraScriptTags"          type="Aura.Component[]"                                               description="Additional &lt;script&gt; elements."/>
    <aura:attribute name="extraMetaTags"            type="Aura.Component[]"                                               description="Additional &lt;meta&gt; tags"/>

    <aura:attribute name="forceError"               type="Boolean" default="false" description="Set this to true to force the display of an error that would be hidden because of nesting."/>
    <aura:attribute name="manifest"                 type="String"                  description="Specifies the location of the document's cache manifest. Works with HTML5 only."/>
    <aura:attribute name="lastMod"                  type="String"                  description="The last modified date."/>
    <aura:attribute name="afterAuraInit"            type="String"                  description="Not used."/>

    <!-- Default initial CSS -->
    <aura:attribute name="inlineStyle" type="Aura.Component[]" description="The CSS style used to display inline elements">
        .auraMsgMask{position:absolute;top:0;bottom:0;left:0;right:0;background:-webkit-radial-gradient(circle,rgba(0,0,0,.2),#000);z-index:1000;display:none}.auraMsgBox{display:none;width:100%;margin:120px auto 0;background-color:#708090;z-index:1002;border-radius:5px;box-shadow:0 20px 40px rgba(0,0,0,.8),inset 0 1px 1px rgba(255,255,255,.3);overflow:hidden}.auraMsgBox h2{font-weight:700;font-size:1.2em;line-height:1.5em;margin:0;padding:10px;overflow:hidden}.auraErrorBox h2{text-shadow:1px 1px 1px rgba(0,0,0,.5);color:#fff}.auraMsgBox a.close{float:right;font-weight:700;font-size:20px;line-height:1em;color:#fff;background-color:transparent;border:1px solid #666;box-shadow:inset 0 1px 1px rgba(255,255,255,.2),0 1px 1px rgba(0,0,0,.4);border-radius:4px;padding:0 6px 4px;margin:0}.auraLoadingBox{text-align:center;width:200px;line-height:80px}.auraErrorBox{position:relative;width:80%;z-index:999}.auraError #auraErrorMessage{background-color:#dcdcdc;margin:0 10px 10px;padding:10px;color:#333;min-height:200px;max-height:300px;overflow:auto;white-space:pre-wrap;font-family:monospace;box-shadow:inset 0 0 10px rgba(0,0,0,.4);border:1px solid #666}.auraForcedErrorBox .auraErrorBox,.auraForcedErrorBox.auraMsgMask,body.auraError .auraErrorBox,body.auraError .auraMsgMask,body.loading .auraLoadingBox{display:block}.assistiveText{position:absolute!important;height:1px;width:1px;overflow:hidden;clip:rect(1px,1px,1px,1px)}.visible{display:block}.invisible{display:none}
    </aura:attribute>

    <!-- appcache progressbar proto -->
    <aura:attribute name="appcacheProgressBarStyle" type="Aura.Component[]" description="The CSS style used to display appcache progress bar.">
        #auraAppcacheProgress{display:none;position:absolute;width:120px;height:26px;top:-10px;left:50%;margin-left:-60px;background-color:gray;border-radius:5px;overflow:hidden;z-index:9999}#auraAppcacheProgress .progressBox{position:absolute;top:14px;left:10px;width:100px;height:6px;overflow:hidden;background-color:white;border-style:solid;border-color:#999;border-width:1px}#auraAppcacheProgress .progressBar{width:1px;height:8px;overflow:hidden;background-color:blue;border-style:solid;border-color:black;border-width:1px}#auraAppcacheProgress.error .progressBar{border-color:red;background-color:pink}
    </aura:attribute>

    {!v.doctype}
    <html manifest="{!v.manifest}">
        <head>
            <title>{!v.title}</title>
            <script>var pageStartTime = (new Date()).getTime();</script>
            {!v.extraMetaTags}

            <!-- ====== Styles ====== -->
            {!v.auraResetTags}
            <style>
                {!v.inlineStyle}
                {!v.appcacheProgressBarStyle}
            </style>
            {!v.auraStyleTags}
            {!v.extraStyleTags}
            <style>{!v.auraInlineStyle}</style>
        <!-- ==================== -->
        </head>

        <body class="{! v.bodyClass + ' ' + v.defaultBodyClass }">
            <div id="auraAppcacheProgress">
                <div class="progressBox">
                    <div class="progressBar"></div>
                </div>
            </div>
            <div class="auraMsgBox auraLoadingBox" aura:id="auraLoadingBox">
	            <div class="logo"/>
	            <div class="spinner"/>
	            <h2>{!v.loadingText}</h2>
	        </div>
            <div aura:id="auraErrorMask" class="{! 'auraMsgMask' + ( v.forceError ? ' auraForcedErrorBox' : '' )}" >
                <div class="auraMsgBox auraErrorBox" aura:id="auraError">
                    <h2>
                        <a class="close" onclick="dismissError();" href="javascript:void(0);">&times;</a>
                        {!v.errorTitle}
                    </h2>
                    <div id="auraErrorMessage">{!v.errorMessage}</div>
                </div>
            </div>

            {!v.body}

            {!v.extraScriptTags}
            {!v.auraScriptTags}
            {!v.auraBaseScriptTags}

            {!v.auraPreInitBlock}

            <script>
                if ({!v.autoInitialize}) {
                    $A.initAsync({!v.auraInit});
                } else if ({!v.autoInitializeSync}){
                    $A.initConfig({!v.auraInitSync});
                }

                function dismissError() {
                    if (window['$A']) {
                        $A.util.removeClass(document.body, 'auraError');
                        $A.util.removeClass(auraErrorMask, 'auraForcedErrorBox');
                    } else {
                        document.body.removeChild(document.getElementById("auraErrorMask"));
                    }
                }
                // We explicitly disable IE as there are issues with it and fastclick.
                // Instead, "touch-action: manipulation;" (IE11) and "-ms-touch-action: manipulation" (IE10)
                // should be used on the components that we want no touch-delay on.
                var attachFastClick = window.$A &amp;&amp; !$A.util.isIE;
                if (attachFastClick) {
                  // To support older browsers
                  if (window.addEventListener) {
                      window.addEventListener('load', function() {
                          // If server-side only aura rendering, window.FastClick won't be loaded
                          if (window.FastClick) {
                              window.FastClick.attach(document.body, {tapDelay: 100, touchBoundary: 10});
                          }
                      }, false);
                  }
                }
            </script>

            {!v.auraInitBlock}

            {!v.auraNamespacesScriptTags}

        </body>
    </html>
</aura:component>
