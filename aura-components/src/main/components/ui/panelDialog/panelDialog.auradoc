<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<aura:documentation>
    <aura:description>
    	<p>Deprecated. Use <code>ui:panel</code> instead.</p>
    	<p><code>ui:panelDialog</code> supports two types of dialogs: non-modal and modal. A non-modal dialog is focusable simultaneously as the component or app that invoked it.
    	This type of dialog has the property <code>isModal="false"</code>. A modal dialog holds focus until the dialog is closed and has the property <code>isModal="true"</code>.</p>
    	<p>To customize the dialog body, create your own component and pass it in the <code>body</code> attribute, or create a component dynamically.
    	Display the dialog by firing the <code>ui:openPanel</code> event and set its parameters. A close button is displayed by default, and you can hide it by setting <code>showCloseButton="false"</code>.
    	Similarly, use the <code>closeOnClickOutside</code> attribute to determine if your dialog should close when a user clicks outside the dialog.  
    	</p>
    	<h4>Non-Modal Dialogs</h4>
    	<p>Set the position of the dialog using a reference node using the <code>referenceElement</code> attribute. This example shows a button displaying a non-modal dialog by passing in another component to its body using <code>$A.newCmp()</code>.</p>
<pre>&lt;aura:component>
     &lt;div class="container">
       &lt;ui:button press="{!c.showNonModal}" aura:id="detailTrigger" label="Show Non-Modal Dialog"/>
     &lt;/div>
    &lt;ui:panelManager />
&lt;/aura:component></pre><p>This controller sets up the non-modal dialog and displays it by firing the <code>ui:openPanel</code> event.</p>
    	<pre>showNonModal: function(cmp, event, helper) {
    var nonModalCmp = $A.newCmp({componentDef: 'myCmp:dialogDetail', attributes: {}});
    var referenceElement = cmp.find("detailTrigger").getElement();
    var openPanelEvent = $A.get('e.ui:openPanel').setParams({
	    show: true,
	    isModal: false,
	    isDialog: true,
	    referenceElement: referenceElement,
	    title: 'Detail Panel',
	    titleDisplay: false,
	    body: nonModalCmp,
	    showCloseButton: false,
	    animation: 'none'
    });
	openPanelEvent.fire();
}</pre>
    <h4>Modal Dialogs</h4>
    <p>By default, a modal dialog displays centrally on the page with an overlay. This example shows a button displaying a modal dialog by passing in another component to its body using <code>$A.newCmp()</code>.</p>
<pre>&lt;aura:component>    
    &lt;div class="container">
       &lt;ui:button press="{!c.showModal}" aura:id="forModal" label="Show Modal Dialog"/>
    &lt;/div>
    &lt;ui:panelManager />
&lt;/aura:component></pre>
    <p>This controller sets up the modal dialog and displays it by firing the <code>ui:openPanel</code> event.</p>
<pre>showModal: function(cmp, event, helper) {
   var modalCmp = $A.newCmp({componentDef: 'myCmp:dialogDetail', attributes: {}});
   var openPanelEvent = $A.get('e.ui:openPanel').setParams({
       show: true,
	   isModal: true,
	   isDialog: true,
	   title: 'Detail Panel',
	   titleDisplay: false,
	   body: modalCmp,
	   animation: 'none'
   });
   openPanelEvent.fire();
}</pre>    
	<h4>Providing a Dynamically Created Component</h4>
    <p>If you're creating a component dynamically for the dialog body, pass in the component configuration using <code>$A.componentService.newComponentAsync()</code>. Specify the component definition and attributes in a helper function.
    For example, you want to add an event handler to the fourth element in the component you created dynamically.</p>
<pre>showModal: function(cmp, event, helper) {
    $A.componentService.newComponentAsync(this, function(cmps){
        var overlay = cmps[3];
        overlay.addHandler('press', cmp, 'c.showModal')
        var openPanelEvent = $A.get('e.ui:openPanel').setParams({
            show: true,
            isModal: true,
            title: 'my panel',
            'class': 'myClass',
            body: cmps
        });
        openPanelEvent.fire();
    }, helper.getConfig(cmp));
}</pre>
    </aura:description>
    <aura:example name="panelDialogExample" ref="uiExamples:panelDialogExample" label="Passing In Another Component">
    	<p>This example shows how you can display a non-modal and modal dialog.</p>
	</aura:example>   
	<aura:example name="panelManagerEx" ref="uitest:panelTest" label="Passing In a Dynamically Created Component">
    	<p>This example shows how you can display dialogs with dynamically created bodies.</p>
	</aura:example>   
</aura:documentation>
