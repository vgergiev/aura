<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<aura:documentation>
    <aura:description>
        <p><code>ui:​panel</code>​ represents a panel that's modal or non-modal. A modal panel doesn't allow any other interaction on the screen when the panel is opened.
        Panels can be full screen or non-full screen. You can control the positioning of the panel relative to an element.
        In non full screen mode, the panel aligns to the center of a parent DOM container and closes when you click outside the boundaries of the panel.
        </p>
        <p>Include one instance of <code>ui:panelManager2</code> to handle and control visibility of all panels in your component or app.
         You can customize a panel's styling, header, body, footer. You can also customize the close button with your own logic.
         You must register your panels using <code>ui:panelManager2</code> before you can create them.
        </p>
        <p>To create a modal, set the <code>panelType</code> attribute to <code>modal</code>.</p>
        <pre>$A.get('e.ui:createPanel').setParams({
    panelType: 'modal',
    visible: true,
    panelConfig: {
        title: 'Modal Header',
        body: body,
        flavor: 'myFlavor',
        footer: footer
        },
        onCreate: function(panel){
            //do something
        }
    }).fire();</pre>
        <p>This example creates a panel by using a custom header and firing <code>ui:createPanel</code>.</p>
<pre>createPanelWithHeader: function (cmp, event, helper) {
    var body = $A.newCmp({componentDef: 'uiExamples:panelContent'}),
        header = $A.newCmp({componentDef: 'uiExamples:panelHeader'});
    $A.get('e.ui:createPanel').setParams({
            panelType   :'panel',
            visible: true,
            panelConfig : {
                referenceElementSelector: '.uiExamplesPanelExamples .customer-header-button',
                showPointer: true,
                direction: 'south',
                useTransition: false,
                showCloseButton: false,
                flavor: 'custom',
                header: header,
                body  : body
            },
            onCreate: function (panel) {
                header.setAttributeValueProvider(panel);
            }

        }).fire();
       
    }</pre>  
        <h4>Customizing the Panel Close Action</h4>
        <p>By default, a close button is provided on the modal but you can provide your own close button. You can also create your own <code>closeAction</code> override. 
        To remove the close button and provide a custom action, set <code>showCloseButton</code> to false and <code>closeOnClickOut</code> to true. 
        Override the close action by passing in the <code>closeAction</code> function in your <code>panelConfig</code> attribute.
        The customized <code>closeAction</code> is called when the close button is clicked or when user press ESC key, click out, or tab out of the panel. The default <code>closeAction</code> hides and destroys the panel.
        </p>
         <p>If you use your own <code>closeAction</code> method, you are overriding the default behavior. The closed panel is not destroyed until the parent component is unrendered. To destroy the panel, call the <code>close()</code> method on the panel object.</p>
        <pre>var myPanel;
$A.get('e.ui:createPanel').setParams({
    // options go here

onCreate: function(panel) {
    myPanel = panel;
}
}).fire();

// Destroy the panel
closeAction: function(panel) {
    myPanel.close();
 }</pre>
 
 	<p>Alternatively, if you're configuring the panel from the context of the panel, use the <code>ui:notify</code> event. This event is also useful
 	when you want to communicate with the panel manager to invoke another method on a component inside another panel.</p>
        <pre>cmp.get('e.notify').setParams({
    action: 'closePanel',
    payload: {callback: yourCallback}
}).fire();</pre>
	<p>In your component, register that it fires the event.</p>
	<pre>&lt;aura:registerEvent name="notify" type="ui:notify"/></pre>
     
        <h4>Positioning Panels</h4>
        <p>Position a panel in relation to a target element by using the direction attribute.To position a panel at the north of the target element, set <code>direction : north</code>. 
        To set a padding between the two, set <code>pad : 30</code>, where 30 is the padding in pixels. The target (referenceElement) can also be the viewport.
        A padding can be added using <code>pad</code> and <code>padTop</code>.</p>
		<pre>$A.get('e.ui:createPanel').setParams({
    panelType: 'panel',
    visible: true,
    panelConfig : {
        referenceElement: target,
        direction: 'north',
        body  : body,
        pad : 30
    }
}).fire();</pre>
		<h4>Aligning your Target Using Advanced Positioning</h4>
        <p>With advanced positioning, instead of using <code>direction</code>, specify the alignments using <code>align</code> and <code>targetAlign</code>.
        For example, you can position the panel on top of the target. Set <code>advanced: true</code>, and specify the alignments.
        The <code>direction</code> attribute is ignored when advanced positioning is used.
		</p>
		<pre>$A.get('e.ui:createPanel').setParams({
    panelType: 'panel',
    visible: true,
    panelConfig : {
        referenceElement: target,
        advanced: true,
        targetAlign : 'left top',
        align : 'left top',
        body  : body,
        pad : 0
    }
}).fire();</pre>
	<p>Let's see how advanced positioning further differs from using the direction attribute. When you set <code>direction</code> to north, the panel is center aligned at the north of the target. 
	Using advanced positioning, you can vertically align the panel and target by setting <code>targetAlign : 'left top'</code> and <code>align : 'left bottom'</code>.
	</p>
	<h4>Using a Bounding Element</h4>
	<p>A bounding element keeps the panel within the element. The default bounding element is the window. The child component must be bound within the parent component.
	 If a bounding element is used, the panel is positioned in relation to the bounding element. For example, setting <code>direction</code> to <code>east</code> positions the panel at the east of the bounding element and within it.
	</p>
	<pre>$A.get('e.ui:createPanel').setParams({
    panelType: 'panel',
    visible: true,
    panelConfig : {
        referenceElement: bigTarget,
        boundingElement: window,
        direction: 'east',
        body  : body,
    pad : 30
    }
}).fire();</pre>
	<p>For examples, see the <a href="/uiExamples/panelPositioningExample.cmp?aura.mode=DEV">Panel Positioning Demo</a>.</p>
     </aura:description>
   
 
</aura:documentation>
