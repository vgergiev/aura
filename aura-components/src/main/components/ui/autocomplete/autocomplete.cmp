<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="ui:input" support="proto" extensible="true" defaultFlavor="default, lookup" description="Represents an input field that suggests a list of values from the data provider as you type.">
    <aura:attribute name="dataProvider" type="Aura.Component[]" required="true" description="A list of data provider components"/>
    <aura:attribute name="emptyListContent" type="Aura.Component[]" description="Content to be shown if the list is empty"/>
    <aura:attribute name="loadingIndicator" type="Aura.Component[]" description="Content to be shown while the list is loading"/>
    <aura:attribute name="inputClass" type="String" description="The css class for input component."/>
    <aura:attribute name="inputType" type="String" default="inputText" description="The type of input component. We support inputText and inputTextArea for now."/>
    <aura:attribute name="listOption" type="Aura.ComponentDefRef[]" required="true" description="A ComponentDefRef to use as the template for each generated option in the list."/>
    <aura:attribute name="optionVar" type="String" required="true" description="The name by which to refer to the current data object inside of the template for each option."/>
    <aura:attribute name="placeholder" type="String" default="" description="Text that is displayed when the input field is empty, to prompt the user for a valid entry."/>
    <aura:attribute name="propertyToMatch" type="String" default="label" description="The property name in the data object which is used to match typing in the input field."/>
    <aura:attribute name="theme" type="String" default="default" description="Theme to apply to this component."/>
    <aura:attribute name="matchFunc" type="Aura.Action" description="Overrides default list item update behavior to allow custom text matching."/>
    <aura:attribute name="autocompleteButton" type="Aura.Component[]" description="Optional button to render with this component."/>

    <aura:attribute name="listHeader" type="Aura.Component[]" description="A facet above the rendered list, for use as a list header"/>
    <aura:attribute name="listFooter" type="Aura.Component[]" description="A facet below the rendered list, for use as a list footer"/>
    <aura:attribute name="showListHeader" type="Boolean" default="true" description="When true the listHeader will be visible"/>
    <aura:attribute name="showListFooter" type="Boolean" default="true" description="When true the listFooter will be visible"/>
    <aura:attribute name="usePanel" type="boolean" default="false"/>
    <aura:attribute name="setDefaultHighlight" type="boolean" default="true" description="Indicate if the first option item should be highlighted by default."/>
    
    <aura:registerEvent name="matchDone" type="ui:matchDone" description="The event fired when the matching is done."/>
    <aura:registerEvent name="inputChange" type="ui:inputChange" description="The event fired when the input value changes."/>
    <aura:registerEvent name="selectListOption" type="ui:selectListOption" description="The event fired when a list option is displayed."/>
    
    <aura:registerEvent name="fetchData" type="ui:fetchData" description="The event indicates we need to fetch data through a data provider."/>
    <aura:handler name="fetchData" action="{!c.fetchData}"/>
    
    <aura:registerEvent name="matchText" type="ui:matchText" description="The event fired when a text match occurs."/>
    <aura:handler name="matchText" action="{!c.matchText}"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    <aura:set attribute="labelPosition" value="hidden"/>
    <aura:handler name="listExpand" event="ui:autocompleteListExpand" action="{!c.handleListExpand}"/>

    <aura:if isTrue="{!v.inputType == 'inputTextArea'}">
        <ui:inputTextAreaForAutocomplete aura:id="input" 
                                         class="{!v.inputClass+' '+v.theme}"
                                         label="{!v.label}"
                                         labelClass="{!v.labelClass}"
                                         labelPosition="{!v.labelPosition}"
                                         placeholder="{!v.placeholder}"
                                         updateOn="{!v.updateOn}"
                                         ariaDescribedBy="{!v.ariaDescribedBy}"
                                         autocompleteButton="{!v.autocompleteButton}"/>
        <aura:set attribute="else">
            <ui:inputTextForAutocomplete aura:id="input" 
                                         class="{!v.inputClass+' '+v.theme}"
                                         label="{!v.label}"
                                         labelClass="{!v.labelClass}"
                                         labelPosition="{!v.labelPosition}"
                                         placeholder="{!v.placeholder}"
                                         updateOn="{!v.updateOn}"
                                         ariaDescribedBy="{!v.ariaDescribedBy}"
                                         autocompleteButton="{!v.autocompleteButton}"/>
        </aura:set>
    </aura:if>
    <aura:if isTrue="{!v.usePanel}">
        <ui:autocompletePanel aura:id="panel">
            <ui:autocompleteList aura:id="list" class="{!v.class + ' lookup__menu'}"
        dataProvider="{!v.dataProvider}" 
        itemVar="{!v.optionVar}" 
        itemTemplate="{!v.listOption}"
        emptyListContent="{!v.emptyListContent}"
        loadingIndicator="{!v.loadingIndicator}"
        listHeader="{!v.listHeader}"
        listFooter="{!v.listFooter}"
        showListHeader="{!v.showListHeader}"
        showListFooter="{!v.showListFooter}"
        theme="{!v.theme}"
        visible="false"
        role="listbox"
        propertyToMatch="{!v.propertyToMatch}"
        matchDone="{!c.handleMatchDone}"
        selectListOption="{!c.handleSelectOption}"
        updateAriaAttributes="{!c.updateAriaAttributes}"
        matchFunc="{!v.matchFunc}"
        setDefaultHighlight="{!v.setDefaultHighlight}"/>
        </ui:autocompletePanel>
        <aura:set attribute="else">
            <ui:autocompleteList aura:id="list" class="{!v.class + ' lookup__menu'}"
        dataProvider="{!v.dataProvider}" 
        itemVar="{!v.optionVar}" 
        itemTemplate="{!v.listOption}"
        emptyListContent="{!v.emptyListContent}"
        loadingIndicator="{!v.loadingIndicator}"
        listHeader="{!v.listHeader}"
        listFooter="{!v.listFooter}"
        showListHeader="{!v.showListHeader}"
        showListFooter="{!v.showListFooter}"
        theme="{!v.theme}"
        visible="false"
        role="listbox"
        propertyToMatch="{!v.propertyToMatch}"
        matchDone="{!c.handleMatchDone}"
        selectListOption="{!c.handleSelectOption}"
        updateAriaAttributes="{!c.updateAriaAttributes}"
        matchFunc="{!v.matchFunc}"
        setDefaultHighlight="{!v.setDefaultHighlight}"/>
    </aura:set>
    </aura:if>
    
</aura:component>